{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","s","onClick","url","img","src","alt","initial","animate","transition","delay","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0288a8d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCQPMb5nW2A-tCeTPPO9esu9rtlwbfIaWk\",\r\n    authDomain: \"firegram-d150b.firebaseapp.com\",\r\n    databaseURL: \"https://firegram-d150b.firebaseio.com\",\r\n    projectId: \"firegram-d150b\",\r\n    storageBucket: \"firegram-d150b.appspot.com\",\r\n    messagingSenderId: \"347234520563\",\r\n    appId: \"1:347234520563:web:a8f3a7c84aad1c56a71686\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n\r\n  // To retrieve the images from the database docs\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    // A realtime update of the docs,whenever there is a change in DB docs it'll be showed in real time\r\n    const unsub = projectFirestore.collection(collection)\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot(snap => {\r\n        let documents = [];\r\n        snap.forEach(doc => {\r\n          documents.push({...doc.data(), id: doc.id});\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n    // this is a cleanup function that react will run when\r\n    // a component using the hook unmounts\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore('images');\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs && docs.map(doc => (\r\n          //Brings different types of animations to the images using Framer-Motion\r\n        <motion.div className=\"img-wrap\" key={doc.id} \r\n          layout\r\n          whileHover={{ opacity: 1 }}s\r\n          onClick={() => setSelectedImg(doc.url)}\r\n        >\r\n          <motion.img src={doc.url} alt=\"uploaded pic\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            transition={{ delay: 1 }}\r\n          />\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PicStore</h1>\n      <h2>Your Pictures</h2>\n      <p>\n“The good photo settles in your eye, the better photo settles in your mind, but the best photo settles in your heart!”<br></br>\n― Mehmet Murat ildan\n     </p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n\r\n//   To get the url back once the upload of image is done \r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection('images');\r\n\r\n    storageRef.put(file).on('state_changed', (snap) => {\r\n        // Formula to calculate the upload percentage\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n\r\n    }, (err) => {\r\n        setError(err);\r\n    \r\n\r\n        // It will run once the upload of file is complete \r\n    }, async() =>{\r\n        const url = await storageRef.getDownloadURL();\r\n\r\n        // To create the url and entry in the firebase database with the timestamp\r\n        const createdAt = timestamp();\r\n        await collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n    })\r\n  },[file])\r\n\r\n\r\n  return { progress, url, error }\r\n\r\n}\r\n\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { progress, url } = useStorage(file);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n\r\n  return (\r\n    <motion.div className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + '%' }}\r\n    ></motion.div>\r\n  );\r\n} \r\n\r\nexport default ProgressBar;","import React, { useState }from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n\r\n    // To store the state of the error generated uploading the incorrect file type\r\n    const [error, setError] = useState(null);\r\n\r\n    // Different types of files allowed for users to upload\r\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    const changeHandler = (e) =>{\r\n        // Converts the uploaded file into a javascript object kinda form \r\n        let selected = e.target.files[0]\r\n        \r\n\r\n        // To check the file type uploaded and to handle the change in state of the file\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            // To avoid the stay of error msg if the image uploaded is of correct format\r\n            setError(\"\")\r\n        } else{\r\n            setFile(null);   \r\n            setError(\"Please select an image file (png/jpeg/jpg)\");\r\n        }\r\n    }\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler}/>\r\n                <span>+</span>\r\n            </label>\r\n\r\n            {/* To show the output either error or correct upload of the file */}\r\n            <div className=\"output\">\r\n               { error && <div className=\"error\">{ error }</div>}\r\n               { file && <div>{ file.name }</div>}\r\n               { file && <ProgressBar file={file} setFile={setFile} /> }\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default UploadForm;\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ setSelectedImg, selectedImg }) => {\r\n\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains('backdrop')) {\r\n      setSelectedImg(null);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className=\"backdrop\" onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import React,{ useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}